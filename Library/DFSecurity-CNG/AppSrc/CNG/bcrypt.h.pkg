// The DataFlex library covering the CryptoAPI Next-Gen (CNG) consists of several layers:
// * The base layer - external_functions, structs, and constants.
// * The low-level interface - an OO-layer eliminating e.g. string conversion, pointer juggling, and unused parameters.
// * The logical CNG interface - an OO-layer that resembles the logical CNG object hierarchy eliminating opening/closing, and creating/destroying CNG handles.
// * The abstraction interface - an OO-layer that is very powerful and easy to use.
//
// This file contains the base layer.

Define STATUS_SUCCESS             for |CI$00000000
Define NTE_BAD_SIGNATURE          for |CI$80090006
Define NTE_NO_MEMORY              for |CI$8009000E
Define STATUS_INVALID_HANDLE      for |CI$C0000008
Define STATUS_INVALID_PARAMETER   for |CI$C000000D
Define STATUS_NO_MEMORY           for |CI$C0000017
Define STATUS_BUFFER_TOO_SMALL    for |CI$C0000023
Define STATUS_DATA_ERROR          for |CI$C000003E
Define STATUS_NOT_SUPPORTED       for |CI$C00000BB
Define STATUS_INVALID_BUFFER_SIZE for |CI$C0000206
Define STATUS_NOT_FOUND           for |CI$C0000225
Define STATUS_INVALID_SIGNATURE   for |CI$C000A000
Define STATUS_AUTH_TAG_MISMATCH   for |CI$C000A002

Define BCRYPT_KDF_HASH            for "HASH"
Define BCRYPT_KDF_HMAC            for "HMAC"
Define BCRYPT_KDF_TLS_PRF         for "TLS_PRF"
Define BCRYPT_KDF_SP80056A_CONCAT for "SP800_56A_CONCAT"

Define KDF_HASH_ALGORITHM    for |CI$00
Define KDF_SECRET_PREPEND    for |CI$01
Define KDF_SECRET_APPEND     for |CI$02
Define KDF_HMAC_KEY          for |CI$03
Define KDF_TLS_PRF_LABEL     for |CI$04
Define KDF_TLS_PRF_SEED      for |CI$05
Define KDF_SECRET_HANDLE     for |CI$06
Define KDF_TLS_PRF_PROTOCOL  for |CI$07
Define KDF_ALGORITHMID       for |CI$08
Define KDF_PARTYUINFO        for |CI$09
Define KDF_PARTYVINFO        for |CI$0A
Define KDF_SUPPPUBINFO       for |CI$0B
Define KDF_SUPPPRIVINFO      for |CI$0C

Define KDF_LABEL             for |CI$0D
Define KDF_CONTEXT           for |CI$0E
Define KDF_SALT              for |CI$0F
Define KDF_ITERATION_COUNT   for |CI$10
Define KDF_GENERIC_PARAMETER for |CI$11
Define KDF_KEYBITLENGTH      for |CI$12

Define KDF_USE_SECRET_AS_HMAC_KEY_FLAG for 1

Define BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO_VERSION for 1

Define BCRYPT_AUTH_MODE_CHAIN_CALLS_FLAG for |CI$00000001
Define BCRYPT_AUTH_MODE_IN_PROGRESS_FLAG for |CI$00000002

Define BCRYPT_OPAQUE_KEY_BLOB   for "OpaqueKeyBlob"
Define BCRYPT_KEY_DATA_BLOB     for "KeyDataBlob"
Define BCRYPT_AES_WRAP_KEY_BLOB for "Rfc3565KeyWrapBlob"

// BCrypt property names
Define BCRYPT_ALGORITHM_NAME        for "AlgorithmName"
Define BCRYPT_AUTH_TAG_LENGTH       for "AuthTagLength"
Define BCRYPT_BLOCK_LENGTH          for "BlockLength"
Define BCRYPT_BLOCK_SIZE_LIST       for "BlockSizeList"
Define BCRYPT_CHAINING_MODE         for "ChainingMode"
Define BCRYPT_CHAIN_MODE_CBC        for "ChainingModeCBC"
Define BCRYPT_CHAIN_MODE_CCM        for "ChainingModeCCM"
Define BCRYPT_CHAIN_MODE_CFB        for "ChainingModeCFB"
Define BCRYPT_CHAIN_MODE_ECB        for "ChainingModeECB"
Define BCRYPT_CHAIN_MODE_GCM        for "ChainingModeGCM"
Define BCRYPT_CHAIN_MODE_NA         for "ChainingModeN/A"
Define BCRYPT_EFFECTIVE_KEY_LENGTH  for "EffectiveKeyLength"
Define BCRYPT_HASH_BLOCK_LENGTH     for "HashBlockLength"
Define BCRYPT_HASH_LENGTH           for "HashDigestLength"
Define BCRYPT_HASH_OID_LIST         for "HashOIDList"
Define BCRYPT_INITIALIZATION_VECTOR for "IV"
Define BCRYPT_IS_KEYED_HASH         for "IsKeyedHash"
Define BCRYPT_IS_REUSABLE_HASH      for "IsReusableHash"
Define BCRYPT_KEY_LENGTH            for "KeyLength"
Define BCRYPT_KEY_LENGTHS           for "KeyLengths"
Define BCRYPT_KEY_OBJECT_LENGTH     for "KeyObjectLength"
Define BCRYPT_KEY_STRENGTH          for "KeyStrength"
Define BCRYPT_MESSAGE_BLOCK_LENGTH  for "MessageBlockLength"
Define BCRYPT_OBJECT_LENGTH         for "ObjectLength"
Define BCRYPT_PADDING_SCHEMES       for "PaddingSchemes"
Define BCRYPT_PCP_PLATFORM_TYPE_PROPERTY for "PCP_PLATFORM_TYPE"
Define BCRYPT_PCP_PROVIDER_VERSION_PROPERTY for "PCP_PROVIDER_VERSION"
Define BCRYPT_PRIMITIVE_TYPE        for "PrimitiveType"
Define BCRYPT_PROVIDER_HANDLE       for "ProviderHandle"
Define BCRYPT_PUBLIC_KEY_LENGTH     for "PublicKeyLength"
Define BCRYPT_SIGNATURE_LENGTH      for "SignatureLength"

// Supported RSA Padding Types
Define BCRYPT_SUPPORTED_PAD_ROUTER    for |CI$00000001
Define BCRYPT_SUPPORTED_PAD_PKCS1_ENC for |CI$00000002
Define BCRYPT_SUPPORTED_PAD_PKCS1_SIG for |CI$00000004
Define BCRYPT_SUPPORTED_PAD_OAEP      for |CI$00000008
Define BCRYPT_SUPPORTED_PAD_PSS       for |CI$00000010

//#define BCRYPT_PROV_DISPATCH 0x00000001

Define BCRYPT_BLOCK_PADDING for |CI$00000001

// RSA padding schemes
Define BCRYPT_PAD_NONE      for |CI$00000001
Define BCRYPT_PAD_PKCS1     for |CI$00000002
Define BCRYPT_PAD_OAEP      for |CI$00000004
Define BCRYPT_PAD_PSS       for |CI$00000008

Define BCRYPTBUFFER_VERSION for 0

Struct BCRYPT_AUTH_TAG_LENGTHS_STRUCT
    UInteger dwMinLength
    UInteger dwMaxLength
    UInteger dwIncrement
End_Struct

Struct BCRYPT_KEY_LENGTHS_STRUCT
    UInteger dwMinLength
    UInteger dwMaxLength
    UInteger dwIncrement
End_Struct

//  typedef Struct _BCRYPT_OID {
//    ULONG cbOID ;
//    PUCHAR pbOID ;
//  } BCRYPT_OID ;
//
//  typedef Struct _BCRYPT_OID_LIST {
//    ULONG dwOIDCount ;
//    BCRYPT_OID *pOIDs ;
//  } BCRYPT_OID_LIST ;

//  typedef Struct _BCRYPT_OAEP_PADDING_INFO {
//    LPCWSTR pszAlgId ;
//    PUCHAR pbLabel ;
//    ULONG cbLabel ;
//  } BCRYPT_OAEP_PADDING_INFO ;


//https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/ns-bcrypt-bcrypt_authenticated_cipher_mode_info
// This is a strange struct. It has unexpected padding in 32-bit that is not even there in 64-bit.
// But it has expected struct padding in 64-bit too.
//typedef Struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO {
//                        Start byte in 32-bit   Start byte in 64-bit
//  ULONG     cbSize;           0                   0
//  ULONG     dwInfoVersion;    4                   4
//  PUCHAR    pbNonce;          8                   8
//  ULONG     cbNonce;          12                  16
//  PUCHAR    pbAuthData;       16                  20  
//  ULONG     cbAuthData;       20                  28
//  PUCHAR    pbTag;            24                  32
//  ULONG     cbTag;            28                  48
//  PUCHAR    pbMacContext;     32                  56       
//  ULONG     cbMacContext;     36                  64       
//  ULONG     cbAAD;            40                  68
//  ULONGLONG cbData;           48                  72
//  ULONG     dwFlags;          56                  80
//                  TOTAL SIZE  64                  88
//} 
Struct BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
    UInteger cbSize
    UInteger dwInfoVersion
    Pointer  pbNonce
    UInteger cbNonce
#IFDEF IS$WIN64
    Integer iMissingAlignment1
#ENDIF
    Pointer  pbAuthData
    UInteger cbAuthData
#IFDEF IS$WIN64
    Integer iMissingAlignment2
#ENDIF
    Pointer  pbTag
    UInteger cbTag
#IFDEF IS$WIN64
    Integer iMissingAlignment3
#ENDIF
    Pointer  pbMacContext
    UInteger cbMacContext
    UInteger cbAAD
#IFNDEF IS$WIN64
    UInteger uiAlignmentPadding1 // found this by trial & error in C - And it is only in 32-bit!!
#ENDIF
    UBigInt  cbData
    UInteger dwFlags
    UInteger uiAlignmentPadding2 // found this by trial & error in C - both 32- and 64-bit
End_Struct

Struct BCryptBuffer
    UInteger cbBuffer
    UInteger BufferType
    Pointer  pvBuffer
End_Struct

Struct BCryptBufferDesc
    UInteger ulVersion
    UInteger cBuffers
    Pointer  pBuffers
End_Struct

Define BCRYPT_DH_PRIVATE_BLOB     for "DHPRIVATEBLOB"
Define BCRYPT_DH_PUBLIC_BLOB      for "DHPUBLICBLOB"
Define BCRYPT_DSA_PRIVATE_BLOB    for "DSAPRIVATEBLOB"
Define BCRYPT_DSA_PUBLIC_BLOB     for "DSAPUBLICBLOB"
Define BCRYPT_ECCPRIVATE_BLOB     for "ECCPRIVATEBLOB"
Define BCRYPT_ECCPUBLIC_BLOB      for "ECCPUBLICBLOB"
Define BCRYPT_PRIVATE_KEY_BLOB    for "PRIVATEBLOB"
Define BCRYPT_PUBLIC_KEY_BLOB     for "PUBLICBLOB"
Define BCRYPT_RSAFULLPRIVATE_BLOB for "RSAFULLPRIVATEBLOB"
Define BCRYPT_RSAPRIVATE_BLOB     for "RSAPRIVATEBLOB"
Define BCRYPT_RSAPUBLIC_BLOB      for "RSAPUBLICBLOB"
Define LEGACY_DH_PRIVATE_BLOB     for "CAPIDHPRIVATEBLOB"
Define LEGACY_DH_PUBLIC_BLOB      for "CAPIDHPUBLICBLOB"
Define LEGACY_DSA_PRIVATE_BLOB    for "CAPIDSAPRIVATEBLOB"
Define LEGACY_DSA_PUBLIC_BLOB     for "CAPIDSAPUBLICBLOB"
Define LEGACY_DSA_V2_PRIVATE_BLOB for "V2CAPIDSAPRIVATEBLOB"
Define LEGACY_DSA_V2_PUBLIC_BLOB  for "V2CAPIDSAPUBLICBLOB"
Define LEGACY_RSAPRIVATE_BLOB     for "CAPIPRIVATEBLOB"
Define LEGACY_RSAPUBLIC_BLOB      for "CAPIPUBLICBLOB"

Define BCRYPT_RSAPUBLIC_MAGIC     for |CI$31415352
//#define BCRYPT_RSAPRIVATE_MAGIC 0x32415352

//#define BCRYPT_RSAFULLPRIVATE_MAGIC 0x33415352
//
//#define BCRYPT_GLOBAL_PARAMETERS L"SecretAgreementParam"
//#define BCRYPT_PRIVATE_KEY L"PrivKeyVal"

//#define BCRYPT_ECDH_PUBLIC_P256_MAGIC 0x314b4345
//#define BCRYPT_ECDH_PRIVATE_P256_MAGIC 0x324b4345
//#define BCRYPT_ECDH_PUBLIC_P384_MAGIC 0x334b4345
//#define BCRYPT_ECDH_PRIVATE_P384_MAGIC 0x344b4345
//#define BCRYPT_ECDH_PUBLIC_P521_MAGIC 0x354b4345
//#define BCRYPT_ECDH_PRIVATE_P521_MAGIC 0x364b4345

Define BCRYPT_ECDSA_PUBLIC_P256_MAGIC for |CI$31534345
//#define BCRYPT_ECDSA_PRIVATE_P256_MAGIC 0x32534345
//#define BCRYPT_ECDSA_PUBLIC_P384_MAGIC 0x33534345
//#define BCRYPT_ECDSA_PRIVATE_P384_MAGIC 0x34534345
//#define BCRYPT_ECDSA_PUBLIC_P521_MAGIC 0x35534345
//#define BCRYPT_ECDSA_PRIVATE_P521_MAGIC 0x36534345
//
//#define BCRYPT_DH_PUBLIC_MAGIC 0x42504844
//#define BCRYPT_DH_PRIVATE_MAGIC 0x56504844
//
//#define BCRYPT_DH_PARAMETERS L"DHParameters"
//#define BCRYPT_DH_PARAMETERS_MAGIC 0x4d504844
//
//#define BCRYPT_DSA_PUBLIC_MAGIC 0x42505344
//#define BCRYPT_DSA_PRIVATE_MAGIC 0x56505344
//#define BCRYPT_DSA_PUBLIC_MAGIC_V2 0x32425044
//#define BCRYPT_DSA_PRIVATE_MAGIC_V2 0x32565044

Define BCRYPT_KEY_DATA_BLOB_MAGIC    for |CI$4d42444b
Define BCRYPT_KEY_DATA_BLOB_VERSION1 for |CI$00000001

//#define BCRYPT_DSA_PARAMETERS L"DSAParameters"
//#define BCRYPT_DSA_PARAMETERS_MAGIC 0x4d505344
//#define BCRYPT_DSA_PARAMETERS_MAGIC_V2 0x324d5044

Define MS_PRIMITIVE_PROVIDER       for "Microsoft Primitive Provider"
Define MS_PLATFORM_CRYPTO_PROVIDER for "Microsoft Platform Crypto Provider"

Define BCRYPT_RSA_ALGORITHM             for "RSA"
Define BCRYPT_RSA_SIGN_ALGORITHM        for "RSA_SIGN"
Define BCRYPT_DH_ALGORITHM              for "DH"
Define BCRYPT_DSA_ALGORITHM             for "DSA"
Define BCRYPT_RC2_ALGORITHM             for "RC2"
Define BCRYPT_RC4_ALGORITHM             for "RC4"
Define BCRYPT_AES_ALGORITHM             for "AES"
Define BCRYPT_DES_ALGORITHM             for "DES"
Define BCRYPT_DESX_ALGORITHM            for "DESX"
Define BCRYPT_3DES_ALGORITHM            for "3DES"
Define BCRYPT_3DES_112_ALGORITHM        for "3DES_112"
Define BCRYPT_MD2_ALGORITHM             for "MD2"
Define BCRYPT_MD4_ALGORITHM             for "MD4"
Define BCRYPT_MD5_ALGORITHM             for "MD5"
Define BCRYPT_SHA1_ALGORITHM            for "SHA1"
Define BCRYPT_SHA256_ALGORITHM          for "SHA256"
Define BCRYPT_SHA384_ALGORITHM          for "SHA384"
Define BCRYPT_SHA512_ALGORITHM          for "SHA512"
Define BCRYPT_AES_GMAC_ALGORITHM        for "AES-GMAC"
Define BCRYPT_AES_CMAC_ALGORITHM        for "AES-CMAC"
Define BCRYPT_ECDSA_P256_ALGORITHM      for "ECDSA_P256"
Define BCRYPT_ECDSA_P384_ALGORITHM      for "ECDSA_P384"
Define BCRYPT_ECDSA_P521_ALGORITHM      for "ECDSA_P521"
Define BCRYPT_ECDH_P256_ALGORITHM       for "ECDH_P256"
Define BCRYPT_ECDH_P384_ALGORITHM       for "ECDH_P384"
Define BCRYPT_ECDH_P521_ALGORITHM       for "ECDH_P521"
Define BCRYPT_RNG_ALGORITHM             for "RNG"
Define BCRYPT_RNG_FIPS186_DSA_ALGORITHM for "FIPS186DSARNG"
Define BCRYPT_RNG_DUAL_EC_ALGORITHM     for "DUALECRNG"
Define BCRYPT_SP800108_CTR_HMAC_ALGORITHM for "SP800_108_CTR_HMAC"
Define BCRYPT_SP80056A_CONCAT_ALGORITHM for "SP800_56A_CONCAT"
Define BCRYPT_PBKDF2_ALGORITHM          for "PBKDF2"
Define BCRYPT_CAPI_KDF_ALGORITHM        for "CAPI_KDF"
Define BCRYPT_ECDSA_ALGORITHM           for "ECDSA"
Define BCRYPT_ECDH_ALGORITHM            for "ECDH"
Define BCRYPT_XTS_AES_ALGORITHM         for "XTS-AES"

// The following pseudo-handles are available on Windows 10+
Enum_List
    Define BCRYPT_MD2_ALG_HANDLE               for |CI$00000001
    Define BCRYPT_MD4_ALG_HANDLE               for |CI$00000011
    Define BCRYPT_MD5_ALG_HANDLE               for |CI$00000021
    Define BCRYPT_SHA1_ALG_HANDLE              for |CI$00000031
    Define BCRYPT_SHA256_ALG_HANDLE            for |CI$00000041
    Define BCRYPT_SHA384_ALG_HANDLE            for |CI$00000051
    Define BCRYPT_SHA512_ALG_HANDLE            for |CI$00000061
    Define BCRYPT_RC4_ALG_HANDLE               for |CI$00000071
    Define BCRYPT_RNG_ALG_HANDLE               for |CI$00000081
    Define BCRYPT_HMAC_MD5_ALG_HANDLE          for |CI$00000091
    Define BCRYPT_HMAC_SHA1_ALG_HANDLE         for |CI$000000a1
    Define BCRYPT_HMAC_SHA256_ALG_HANDLE       for |CI$000000b1
    Define BCRYPT_HMAC_SHA384_ALG_HANDLE       for |CI$000000c1
    Define BCRYPT_HMAC_SHA512_ALG_HANDLE       for |CI$000000d1
    Define BCRYPT_RSA_ALG_HANDLE               for |CI$000000e1
    Define BCRYPT_ECDSA_ALG_HANDLE             for |CI$000000f1
    
    Define BCRYPT_AES_CMAC_ALG_HANDLE          for |CI$00000101
    Define BCRYPT_AES_GMAC_ALG_HANDLE          for |CI$00000111
    Define BCRYPT_HMAC_MD2_ALG_HANDLE          for |CI$00000121
    Define BCRYPT_HMAC_MD4_ALG_HANDLE          for |CI$00000131
    
    Define BCRYPT_3DES_CBC_ALG_HANDLE          for |CI$00000141
    Define BCRYPT_3DES_ECB_ALG_HANDLE          for |CI$00000151
    Define BCRYPT_3DES_CFB_ALG_HANDLE          for |CI$00000161
    Define BCRYPT_3DES_112_CBC_ALG_HANDLE      for |CI$00000171
    Define BCRYPT_3DES_112_ECB_ALG_HANDLE      for |CI$00000181
    Define BCRYPT_3DES_112_CFB_ALG_HANDLE      for |CI$00000191
    Define BCRYPT_AES_CBC_ALG_HANDLE           for |CI$000001a1
    Define BCRYPT_AES_ECB_ALG_HANDLE           for |CI$000001b1
    Define BCRYPT_AES_CFB_ALG_HANDLE           for |CI$000001c1
    Define BCRYPT_AES_CCM_ALG_HANDLE           for |CI$000001d1
    Define BCRYPT_AES_GCM_ALG_HANDLE           for |CI$000001e1
    Define BCRYPT_DES_CBC_ALG_HANDLE           for |CI$000001f1
    Define BCRYPT_DES_ECB_ALG_HANDLE           for |CI$00000201
    Define BCRYPT_DES_CFB_ALG_HANDLE           for |CI$00000211
    Define BCRYPT_DESX_CBC_ALG_HANDLE          for |CI$00000221
    Define BCRYPT_DESX_ECB_ALG_HANDLE          for |CI$00000231
    Define BCRYPT_DESX_CFB_ALG_HANDLE          for |CI$00000241
    Define BCRYPT_RC2_CBC_ALG_HANDLE           for |CI$00000251
    Define BCRYPT_RC2_ECB_ALG_HANDLE           for |CI$00000261
    Define BCRYPT_RC2_CFB_ALG_HANDLE           for |CI$00000271
    
    Define BCRYPT_DH_ALG_HANDLE                for |CI$00000281
    Define BCRYPT_ECDH_ALG_HANDLE              for |CI$00000291
    Define BCRYPT_ECDH_P256_ALG_HANDLE         for |CI$000002a1
    Define BCRYPT_ECDH_P384_ALG_HANDLE         for |CI$000002b1
    Define BCRYPT_ECDH_P521_ALG_HANDLE         for |CI$000002c1
    Define BCRYPT_DSA_ALG_HANDLE               for |CI$000002d1
    Define BCRYPT_ECDSA_P256_ALG_HANDLE        for |CI$000002e1
    Define BCRYPT_ECDSA_P384_ALG_HANDLE        for |CI$000002f1
    Define BCRYPT_ECDSA_P521_ALG_HANDLE        for |CI$00000301
    Define BCRYPT_RSA_SIGN_ALG_HANDLE          for |CI$00000311
    
    Define BCRYPT_CAPI_KDF_ALG_HANDLE          for |CI$00000321
    Define BCRYPT_PBKDF2_ALG_HANDLE            for |CI$00000331
    
    Define BCRYPT_SP800108_CTR_HMAC_ALG_HANDLE for |CI$00000341
    Define BCRYPT_SP80056A_CONCAT_ALG_HANDLE   for |CI$00000351
    
    Define BCRYPT_TLS1_1_KDF_ALG_HANDLE        for |CI$00000361
    Define BCRYPT_TLS1_2_KDF_ALG_HANDLE        for |CI$00000371
    
    Define BCRYPT_XTS_AES_ALG_HANDLE           for |CI$00000381
End_Enum_List

Define BCRYPT_CIPHER_INTERFACE                for |CI$00000001
Define BCRYPT_HASH_INTERFACE                  for |CI$00000002
Define BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE for |CI$00000003
Define BCRYPT_SECRET_AGREEMENT_INTERFACE      for |CI$00000004
Define BCRYPT_SIGNATURE_INTERFACE             for |CI$00000005
Define BCRYPT_RNG_INTERFACE                   for |CI$00000006
Define BCRYPT_KEY_DERIVATION_INTERFACE        for |CI$00000007

Define BCRYPT_ALG_HANDLE_HMAC_FLAG for |CI$00000008
Define BCRYPT_CAPI_AES_FLAG        for |CI$00000010
Define BCRYPT_HASH_REUSABLE_FLAG   for |CI$00000020

//#define BCRYPT_BUFFERS_LOCKED_FLAG 0x00000040

Define BCRYPT_CIPHER_OPERATION                for |CI$00000001
Define BCRYPT_HASH_OPERATION                  for |CI$00000002
Define BCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION for |CI$00000004
Define BCRYPT_SECRET_AGREEMENT_OPERATION      for |CI$00000008
Define BCRYPT_SIGNATURE_OPERATION             for |CI$00000010
Define BCRYPT_RNG_OPERATION                   for |CI$00000020
Define BCRYPT_KEY_DERIVATION_OPERATION        for |CI$00000040

//#define BCRYPT_PUBLIC_KEY_FLAG 0x00000001
//#define BCRYPT_PRIVATE_KEY_FLAG 0x00000002
//
//#define BCRYPT_NO_KEY_VALIDATION 0x00000008

Define BCRYPT_RNG_USE_ENTROPY_IN_BUFFER for |CI$00000001
Define BCRYPT_USE_SYSTEM_PREFERRED_RNG  for |CI$00000002

//#define BCRYPT_MAKE_INTERFACE_VERSION(major, minor) { (USHORT)major,(USHORT)minor}
//#define BCRYPT_IS_INTERFACE_VERSION_COMPATIBLE(loader, provider) ((loader).MajorVersion <= (provider).MajorVersion)
//
//#define BCRYPT_CIPHER_INTERFACE_VERSION_1 BCRYPT_MAKE_INTERFACE_VERSION (1, 0)
//#define BCRYPT_HASH_INTERFACE_VERSION_1 BCRYPT_MAKE_INTERFACE_VERSION (1, 0)
//#define BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE_VERSION_1 BCRYPT_MAKE_INTERFACE_VERSION (1, 0)
//#define BCRYPT_SECRET_AGREEMENT_INTERFACE_VERSION_1 BCRYPT_MAKE_INTERFACE_VERSION (1, 0)
//#define BCRYPT_SIGNATURE_INTERFACE_VERSION_1 BCRYPT_MAKE_INTERFACE_VERSION (1, 0)
//#define BCRYPT_RNG_INTERFACE_VERSION_1 BCRYPT_MAKE_INTERFACE_VERSION (1, 0)
//
//#define CRYPT_MIN_DEPENDENCIES (0x00000001)
//#define CRYPT_PROCESS_ISOLATE (0x00010000)
//
//#define CRYPT_UM (0x00000001)
//#define CRYPT_KM (0x00000002)
//#define CRYPT_MM (0x00000003)
//#define CRYPT_ANY (0x00000004)
//
//#define CRYPT_OVERWRITE (0x00000001)
//
//#define CRYPT_LOCAL (0x00000001)
//#define CRYPT_DOMAIN (0x00000002)
//
//#define CRYPT_EXCLUSIVE (0x00000001)
//#define CRYPT_OVERRIDE (0x00010000)
//
//#define CRYPT_ALL_FUNCTIONS (0x00000001)
//#define CRYPT_ALL_PROVIDERS (0x00000002)
//
//#define CRYPT_PRIORITY_TOP (0x00000000)
//#define CRYPT_PRIORITY_BOTTOM (0xffffffff)
//
//#define CRYPT_DEFAULT_CONTEXT L"Default"
//
//  typedef Struct _BCRYPT_KEY_BLOB {
//    ULONG Magic ;
//  } BCRYPT_KEY_BLOB ;

Struct BCRYPT_RSAKEY_BLOB
    UInteger Magic
    UInteger BitLength
    UInteger cbPublicExp
    UInteger cbModulus
    UInteger cbPrime1
    UInteger cbPrime2
//    PublicExponent[cbPublicExp] // Big-endian
//    Modulus[cbModulus] // Big-endian
End_Struct

Struct BCRYPT_ECCKEY_BLOB
    UInteger dwMagic
    UInteger cbKey
End_Struct

//  typedef Struct _BCRYPT_DH_KEY_BLOB {
//    ULONG dwMagic ;
//    ULONG cbKey ;
//  } BCRYPT_DH_KEY_BLOB,*PBCRYPT_DH_KEY_BLOB ;
//
//  typedef Struct _BCRYPT_DH_PARAMETER_HEADER {
//    ULONG cbLength ;
//    ULONG dwMagic ;
//    ULONG cbKeyLength ;
//  } BCRYPT_DH_PARAMETER_HEADER ;
//
//  typedef Struct _BCRYPT_DSA_KEY_BLOB {
//    ULONG dwMagic ;
//    ULONG cbKey ;
//    UChar Count[4] ;
//    UCHAR Seed[20] ;
//    UChar q[20] ;
//  } BCRYPT_DSA_KEY_BLOB,*PBCRYPT_DSA_KEY_BLOB ;

//Define HASHALGORITHM_ENUM for Integer
//Enum_List
//    Define DSA_HASH_ALGORITHM_SHA1   for 0
//    Define DSA_HASH_ALGORITHM_SHA256
//    Define DSA_HASH_ALGORITHM_SHA512
//End_Enum_List
//
//Define DSAFIPSVERSION_ENUM for Integer
//Enum_List
//    Define DSA_FIPS186_2 for 0
//    Define DSA_FIPS186_3
//End_Enum_List
//
//Struct BCRYPT_DSA_KEY_BLOB_V2
//    UInteger dwMagic
//    UInteger cbKey
//    HASHALGORITHM_ENUM hashAlgorithm
//    DSAFIPSVERSION_ENUM standardVersion
//    UInteger cbSeedLength
//    UInteger cbGroupSize
//    UChar[4] Count
//End_Struct

Struct BCRYPT_KEY_DATA_BLOB_HEADER
    UInteger dwMagic
    UInteger dwVersion
    UInteger cbKeyData
End_Struct

//  typedef Struct _BCRYPT_DSA_PARAMETER_HEADER {
//    ULONG cbLength ;
//    ULONG dwMagic ;
//    ULONG cbKeyLength ;
//    UCHAR Count[4] ;
//    UChar Seed[20] ;
//    UCHAR q[20] ;
//  } BCRYPT_DSA_PARAMETER_HEADER ;

//Struct BCRYPT_DSA_PARAMETER_HEADER_V2
//    UInteger cbLength
//    // BCRYPT_DSA_KEY_BLOB_V2 :
//    UInteger dwMagic
//    UInteger cbKeyLength
//    HASHALGORITHM_ENUM hashAlgorithm
//    DSAFIPSVERSION_ENUM standardVersion
//    UInteger cbSeedLength
//    UInteger cbGroupSize
//    UChar[4] Count
//End_Struct

Struct BCRYPT_ALGORITHM_IDENTIFIER
    Pointer  pszName
    UInteger dwClass
    UInteger dwFlags
End_Struct

//  typedef Struct _BCRYPT_PROVIDER_NAME {
//    LPWSTR pszProviderName ;
//  } BCRYPT_PROVIDER_NAME ;
//
//  typedef Struct _BCRYPT_INTERFACE_VERSION {
//    UShort MajorVersion ;
//    USHORT MinorVersion ;
//  } BCRYPT_INTERFACE_VERSION,*PBCRYPT_INTERFACE_VERSION ;
//
//  typedef Struct _CRYPT_INTERFACE_REG {
//    ULONG dwInterface ;
//    ULONG dwFlags ;
//    ULONG cFunctions ;
//    PWSTR *rgpszFunctions ;
//  } CRYPT_INTERFACE_REG,*PCRYPT_INTERFACE_REG ;
//
//  typedef Struct _CRYPT_IMAGE_REG {
//    PWSTR pszImage ;
//    ULONG cInterfaces ;
//    PCRYPT_INTERFACE_REG *rgpInterfaces ;
//  } CRYPT_IMAGE_REG,*PCRYPT_IMAGE_REG ;
//
//  typedef Struct _CRYPT_PROVIDER_REG {
//    ULONG cAliases ;
//    PWSTR *rgpszAliases ;
//    PCRYPT_IMAGE_REG pUM ;
//    PCRYPT_IMAGE_REG pKM ;
//  } CRYPT_PROVIDER_REG,*PCRYPT_PROVIDER_REG ;

Struct CRYPT_PROVIDERS
    UInteger cProviders
#IFDEF IS$WIN64
    Integer  iMissingAligment1
#ENDIF
    Pointer  rgpszProviders
End_Struct

//  typedef Struct _CRYPT_CONTEXT_CONFIG {
//    ULONG dwFlags ;
//    ULONG dwReserved ;
//  } CRYPT_CONTEXT_CONFIG,*PCRYPT_CONTEXT_CONFIG ;
//
//  typedef Struct _CRYPT_CONTEXT_FUNCTION_CONFIG {
//    ULONG dwFlags ;
//    ULONG dwReserved ;
//  } CRYPT_CONTEXT_FUNCTION_CONFIG,*PCRYPT_CONTEXT_FUNCTION_CONFIG ;
//
//  typedef Struct _CRYPT_CONTEXTS {
//    ULONG cContexts ;
//    PWSTR *rgpszContexts ;
//  } CRYPT_CONTEXTS,*PCRYPT_CONTEXTS ;
//
//  typedef Struct _CRYPT_CONTEXT_FUNCTIONS {
//    ULONG cFunctions ;
//    PWSTR *rgpszFunctions ;
//  } CRYPT_CONTEXT_FUNCTIONS,*PCRYPT_CONTEXT_FUNCTIONS ;
//
//  typedef Struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS {
//    ULONG cProviders ;
//    PWSTR *rgpszProviders ;
//  } CRYPT_CONTEXT_FUNCTION_PROVIDERS,*PCRYPT_CONTEXT_FUNCTION_PROVIDERS ;
//
//  typedef Struct _CRYPT_PROPERTY_REF {
//    PWSTR pszProperty ;
//    ULONG cbValue ;
//    PUCHAR pbValue ;
//  } CRYPT_PROPERTY_REF,*PCRYPT_PROPERTY_REF ;
//
//  typedef Struct _CRYPT_IMAGE_REF {
//    PWSTR pszImage ;
//    ULONG dwFlags ;
//  } CRYPT_IMAGE_REF,*PCRYPT_IMAGE_REF ;
//
//  typedef Struct _CRYPT_PROVIDER_REF {
//    ULONG dwInterface ;
//    PWSTR pszFunction ;
//    PWSTR pszProvider ;
//    ULONG cProperties ;
//    PCRYPT_PROPERTY_REF *rgpProperties ;
//    PCRYPT_IMAGE_REF pUM ;
//    PCRYPT_IMAGE_REF pKM ;
//  } CRYPT_PROVIDER_REF,*PCRYPT_PROVIDER_REF ;
//
//  typedef Struct _CRYPT_PROVIDER_REFS {
//    ULONG cProviders ;
//    PCRYPT_PROVIDER_REF *rgpProviders ;
//  } CRYPT_PROVIDER_REFS,*PCRYPT_PROVIDER_REFS ;

//***** CNG Cryptographic Configuration Functions *****//

{ Visibility=Private }
External_Function WinAPI_BCryptEnumAlgorithms "BCryptEnumAlgorithms" Bcrypt.dll ;
    UInteger dwAlgOperations ;
    Pointer  pAlgCount ;
    Pointer  ppAlgList ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptEnumRegisteredProviders "BCryptEnumRegisteredProviders" Bcrypt.dll ;
    Pointer pcbBuffer ;
    Pointer ppBuffer ;
    Returns Integer

//***** CNG Cryptographic Primitive Functions *****//

{ Visibility=Private }
External_Function WinAPI_BCryptOpenAlgorithmProvider "BCryptOpenAlgorithmProvider" Bcrypt.dll ;
    Pointer  phAlgorithm ;
    Pointer  pszAlgId ;
    Pointer  pszImplementation ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptGetProperty "BCryptGetProperty" Bcrypt.dll ;
    Handle   hObject ;
    Pointer  pszProperty ;
    Pointer  pbOutput ;
    UInteger cbOutput ;
    Pointer  pcbResult ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptSetProperty "BCryptSetProperty" Bcrypt.dll ;
    Handle hObject ;
    Pointer pszProperty ;
    Pointer pbInput ;
    UInteger cbInput ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptCloseAlgorithmProvider "BCryptCloseAlgorithmProvider" Bcrypt.dll ;
    Handle   hAlgorithm ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptFreeBuffer "BCryptFreeBuffer" Bcrypt.dll ;
    Pointer pvBuffer ;
    Returns Void_Type

{ Visibility=Private }
External_Function WinAPI_BCryptGenerateSymmetricKey "BCryptGenerateSymmetricKey" Bcrypt.dll ;
    Handle   hAlgorithm ;
    Pointer  phKey ;
    Pointer  pbKeyObject ;
    UInteger cbKeyObject ;
    Pointer  pbSecret ;
    UInteger cbSecret ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptGenerateKeyPair "BCryptGenerateKeyPair" Bcrypt.dll ;
    Handle   hAlgorithm ;
    Pointer  phKey ;
    UInteger dwLength ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptEncrypt "BCryptEncrypt" Bcrypt.dll ;
    Handle   hKey ;
    Pointer  pbInput ;
    UInteger cbInput ;
    Pointer  pPaddingInfo ;
    Pointer  pbIV ;
    UInteger cbIV ;
    Pointer  pbOutput ;
    UInteger cbOutput ;
    Pointer  pcbResult ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptDecrypt "BCryptDecrypt" Bcrypt.dll ;
    Handle   hKey ;
    Pointer  pbInput ;
    UInteger cbInput ;
    Pointer  pPaddingInfo ;
    Pointer  pbIV ;
    UInteger cbIV ;
    Pointer  pbOutput ;
    UInteger cbOutput ;
    Pointer  pcbResult ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptExportKey "BCryptExportKey" Bcrypt.dll ;
    Handle   hKey ;
    Handle   hExportKey ;
    Pointer  pszBlobType ;
    Pointer  pbOutput ;
    UInteger cbOutput ;
    Pointer  pcbResult ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptImportKey "BCryptImportKey" Bcrypt.dll ;
    Handle   hAlgorithm ;
    Handle   hImportKey ;
    Pointer  pszBlobType ;
    Pointer  phKey ;
    Pointer  pbKeyObject ;
    UInteger cbKeyObject ;
    Pointer  pbInput ;
    UInteger cbInput ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptImportKeyPair "BCryptImportKeyPair" Bcrypt.dll ;
    Handle   hAlgorithm ;
    Handle   hImportKey ;
    Pointer  pszBlobType ;
    Pointer  phKey ;
    Pointer  pbInput ;
    UInteger cbInput ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptDuplicateKey "BCryptDuplicateKey" Bcrypt.dll ;
    Handle   hKey ;
    Pointer  phNewKey ;
    Pointer  pbKeyObject ;
    UInteger cbKeyObject ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptFinalizeKeyPair "BCryptFinalizeKeyPair" Bcrypt.dll ;
    Handle   hKey ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptDestroyKey "BCryptDestroyKey" Bcrypt.dll ;
    Handle hKey ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptDestroySecret "BCryptDestroySecret" Bcrypt.dll ;
    Handle hSecret ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptSecretAgreement "BCryptSecretAgreement" Bcrypt.dll ;
    Handle   hPrivKey ;
    Handle   hPubKey ;
    Pointer  phAgreedSecret ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptDeriveKey "BCryptDeriveKey" Bcrypt.dll ;
    Handle   hSharedSecret ;
    Pointer  pwszKDF ;
    Pointer  pParameterList ;
    Pointer  pbDerivedKey ;
    UInteger cbDerivedKey ;
    Pointer  pcbResult ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptKeyDerivation "BCryptKeyDerivation" Bcrypt.dll ;
    Handle   hKey ;
    Pointer  pParameterList ;
    Pointer  pbDerivedKey ;
    UInteger cbDerivedKey ;
    Pointer  pcbResult ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptCreateHash "BCryptCreateHash" Bcrypt.dll ;
    Handle   hAlgorithm ;
    Pointer  phHash ;
    Pointer  pbHashObject ;
    UInteger cbHashObject ;
    Pointer  pbSecret ;
    UInteger cbSecret ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
// Requires: Windows 10 or Windows Server 2016
External_Function WinAPI_BCryptHash "BCryptHash" Bcrypt.dll ;
    Handle   hAlgorithm ;
    Pointer  pbSecret ;
    UInteger cbSecret ;
    Pointer  pbInput ;
    UInteger cbInput ;
    Pointer  pbOutput ;
    UInteger cbOutput ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptHashData "BCryptHashData" Bcrypt.dll ;
    Handle   hHash ;
    Pointer  pbInput ;
    UInteger cbInput ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptFinishHash "BCryptFinishHash" Bcrypt.dll ;
    Handle   hHash ;
    Pointer  pbOutput ;
    UInteger cbOutput ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptDuplicateHash "BCryptDuplicateHash" Bcrypt.dll ;
    Handle   hHash ;
    Pointer  phNewHash ;
    Pointer  pbHashObject ;
    UInteger cbHashObject ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptDestroyHash "BCryptDestroyHash" Bcrypt.dll ;
    Handle hHash ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptGenRandom "BCryptGenRandom" Bcrypt.dll ;
    Handle   hAlgorithm ;
    Pointer  pbBuffer ;
    UInteger cbBuffer ;
    UInteger dwFlags ;
    Returns Integer

//***** CNG Helper Functions *****//

{ Visibility=Private }
External_Function WinAPI_BCryptDeriveKeyCapi "BCryptDeriveKeyCapi" Bcrypt.dll ;
    Handle   hHash ;
    Handle   hTargetAlg ;
    Pointer  pbDerivedKey ;
    UInteger cbDerivedKey ;
    UInteger dwFlags ;
    Returns Integer

#IF (!@ >= 200)     // DataFlex version 20.0 and later: Bigint is used instead of the two UIntegers.

{ Visibility=Private }
External_Function WinAPI_BCryptDeriveKeyPBKDF2 "BCryptDeriveKeyPBKDF2" Bcrypt.dll ;
    Handle   hPrf ;
    Pointer  pbPassword ;
    UInteger cbPassword ;
    Pointer  pbSalt ;
    UInteger cbSalt ;
    BigInt   cIterations ;
    Pointer  pbDerivedKey ;
    UInteger cbDerivedKey ;
    UInteger dwFlags ;
    Returns Integer
    
#ELSE

{ Visibility=Private }
External_Function WinAPI_BCryptDeriveKeyPBKDF2 "BCryptDeriveKeyPBKDF2" Bcrypt.dll ;
    Handle   hPrf ;
    Pointer  pbPassword ;
    UInteger cbPassword ;
    Pointer  pbSalt ;
    UInteger cbSalt ;
;// UBigInt   cIterations ;
    UInteger cIterations1 ;
    UInteger cIterations2 ;
    Pointer  pbDerivedKey ;
    UInteger cbDerivedKey ;
    UInteger dwFlags ;
    Returns Integer

#ENDIF

Struct BCRYPT_PKCS1_PADDING_INFO
    Pointer pszAlgId
End_Struct

Struct BCRYPT_PSS_PADDING_INFO
    Pointer  pszAlgId
    UInteger cbSalt
#IFDEF IS$WIN64
    Integer  iMissingAligment1
#ENDIF
End_Struct

{ Visibility=Private }
External_Function WinAPI_BCryptSignHash "BCryptSignHash" Bcrypt.dll ;
    Handle   hKey ;
    Pointer  pPaddingInfo ;
    Pointer  pbInput ;
    UInteger cbInput ;
    Pointer  pbOutput ;
    UInteger cbOutput ;
    Pointer  pcbResult ;
    UInteger dwFlags ;
    Returns Integer

{ Visibility=Private }
External_Function WinAPI_BCryptVerifySignature "BCryptVerifySignature" Bcrypt.dll ;
    Handle   hKey ;
    Pointer  pPaddingInfo ;
    Pointer  pbHash ;
    UInteger cbHash ;
    Pointer  pbSignature ;
    UInteger cbSignature ;
    UInteger dwFlags ;
    Returns Integer
