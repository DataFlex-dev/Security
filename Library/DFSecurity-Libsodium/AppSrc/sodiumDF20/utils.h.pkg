#IFDEF IS$WIN64
  Define sLibsodiumDllName for libsodium64.dll
#ELSE
  Define sLibsodiumDllName for libsodium.dll
#ENDIF

{ Visibility=Private }
External_Function libsodium_sodium_memzero "sodium_memzero" sLibsodiumDllName ;
    Pointer  pnt ;
    UInteger len ;
    Returns  Void_Type

// WARNING: sodium_memcmp() must be used to verify If two secret keys
// are equal, in constant Time.
// It Returns 0 If the keys are equal, and -1 If they differ.
// This Function is not designed for lexicographical comparisons.
{ Visibility=Private }
External_Function libsodium_sodium_memcmp "sodium_memcmp" sLibsodiumDllName ;
    Pointer  b1 ;
    Pointer  b2 ;
    UInteger len ;
    Returns  Integer

// sodium_compare() Returns -1 If b1_ < b2_, 1 If b1_ > b2_ and 0 If b1_ == b2_
// It is suitable for lexicographical comparisons, or to compare nonces
// and counters stored in little-endian format.
// However, it is slower than sodium_memcmp().
{ Visibility=Private }
External_Function libsodium_sodium_compare "sodium_compare" sLibsodiumDllName ;
    Pointer  b1 ;
    Pointer  b2 ;
    UInteger len ;
    Returns  Integer

{ Visibility=Private }
External_Function libsodium_sodium_is_zero "sodium_is_zero" sLibsodiumDllName ;
    Pointer  n ;
    UInteger nlen ;
    Returns  Integer

{ Visibility=Private }
External_Function libsodium_sodium_increment "sodium_increment" sLibsodiumDllName ;
    Pointer  n ;
    UInteger nlen ;
    Returns  Void_Type

{ Visibility=Private }
External_Function libsodium_sodium_add "sodium_add" sLibsodiumDllName ;
    Pointer  a ;
    Pointer  b ;
    UInteger len ;
    Returns  Void_Type

{ Visibility=Private }
External_Function libsodium_sodium_bin2hex "sodium_bin2hex" sLibsodiumDllName ;
    Pointer  hex ;
    UInteger hex_maxlen ;
    Pointer  bin ;
    UInteger bin_len ;
    Returns  Pointer

{ Visibility=Private }
External_Function libsodium_sodium_hex2bin "sodium_hex2bin" sLibsodiumDllName ;
    Pointer  bin ;
    UInteger bin_maxlen ;
    Pointer  hex ;
    UInteger hex_len ;
    Pointer  ignore ;
    UInteger bin_len ;
    Pointer  hex_end ;
    Returns  Integer

{ Visibility=Private }
External_Function libsodium_sodium_mlock "sodium_mlock" sLibsodiumDllName ;
    Pointer  addr ;
    UInteger len ;
    Returns  Integer

{ Visibility=Private }
External_Function libsodium_sodium_munlock "sodium_munlock" sLibsodiumDllName ;
    Pointer  addr ;
    UInteger len ;
    Returns  Integer

// WARNING: sodium_malloc() and sodium_allocarray() are not general-purpose
// allocation functions.
//
// They return a Pointer to a region filled with 0xd0 bytes, immediately
// followed by a guard page.
// as a result, accessing a single byte after the requested allocation size
// will intentionally trigger a segmentation fault.
//
// A canary and an additional guard page placed before the beginning of the
// region may also kill the process If a buffer underflow is detected.
//
// The memory layout is:
// [unprotected region size (read only)][guard page (no access)][unprotected pages (read/write)][guard page (no access)]
// With the layout of the unprotected pages being:
// [optional padding][16-bytes canary][user region]
//
// However:
// - These functions are significantly slower than standard functions
// - Each allocation requires 3 or 4 additional pages
// - The returned Address will not be aligned If the allocation size is not
//   a multiple of the required alignment. For this reason, these functions
//   are designed to store data, such as secret keys and messages.
//
// sodium_malloc() can be used to allocate any libsodium data structure.
//
// The crypto_generichash_state structure is packed and its length is
// either 357 or 361 bytes. For this reason, when using sodium_malloc() to
// allocate a crypto_generichash_state structure, padding must be added in
// order to ensure proper alignment. crypto_generichash_statebytes()
// Returns the rounded up structure size, and should be prefered to sizeof():
// state = sodium_malloc(crypto_generichash_statebytes()) ;

{ Visibility=Private }
External_Function libsodium_sodium_malloc "sodium_malloc" sLibsodiumDllName ;
    UInteger size ;
    Returns  Pointer

{ Visibility=Private }
External_Function libsodium_sodium_allocarray "sodium_allocarray" sLibsodiumDllName ;
    UInteger count ;
    UInteger size ;
    Returns  Pointer

{ Visibility=Private }
External_Function libsodium_sodium_free "sodium_free" sLibsodiumDllName ;
    Pointer ptr ;
    Returns Void_Type

{ Visibility=Private }
External_Function libsodium_sodium_mprotect_noaccess "sodium_mprotect_noaccess" sLibsodiumDllName ;
    Pointer ptr ;
    Returns Integer

{ Visibility=Private }
External_Function libsodium_sodium_mprotect_readonly "sodium_mprotect_readonly" sLibsodiumDllName ;
    Pointer ptr ;
    Returns Integer

{ Visibility=Private }
External_Function libsodium_sodium_mprotect_readwrite "sodium_mprotect_readwrite" sLibsodiumDllName ;
    Pointer ptr ;
    Returns Integer

//* -------- */

// int _sodium_alloc_init(void) ;

