///*
// *  WARNING: This is just a stream cipher. It is NOT authenticated encryption.
// *  While it provides some protection against eavesdropping, it does NOT
// *  provide any security against active attacks.
// *  Unless you know what you're doing, what you are looking for is probably
// *  the crypto_box functions.
// */

#IF (!@ >= 200)
  Use sodiumDF20\crypto_stream_xsalsa20.h.pkg
#ELSE
  Use sodium\crypto_stream_xsalsa20.h.pkg
#ENDIF

Define crypto_stream_KEYBYTES for crypto_stream_xsalsa20_KEYBYTES

#IFNDEF sLibsodiumDllName
#IFDEF IS$WIN64
  Define sLibsodiumDllName for libsodium64.dll
#ELSE
  Define sLibsodiumDllName for libsodium.dll
#ENDIF 
#ENDIF

{ Visibility=Private }
External_Function libsodium_crypto_stream_keybytes "crypto_stream_keybytes" sLibsodiumDllName ;
    Returns UInteger

Define crypto_stream_NONCEBYTES for crypto_stream_xsalsa20_NONCEBYTES

{ Visibility=Private }
External_Function libsodium_crypto_stream_noncebytes "crypto_stream_noncebytes" sLibsodiumDllName ;
    Returns UInteger

Define crypto_stream_PRIMITIVE for "xsalsa20"

{ Visibility=Private }
External_Function libsodium_crypto_stream_primitive "crypto_stream_primitive" sLibsodiumDllName ;
    Returns String

{ Visibility=Private }
External_Function libsodium_crypto_stream "crypto_stream" sLibsodiumDllName ;
    Pointer  c ;
;// UBigInt  clen ;
    UInteger clen1 ;
    UInteger clen2 ;
    Pointer  n ;
    Pointer  k ;
    Returns  Integer

{ Visibility=Private }
External_Function libsodium_crypto_stream_xor "crypto_stream_xor" sLibsodiumDllName ;
    Pointer  c ;
    Pointer  m ;
;// UBigInt  mlen ;
    UInteger mlen1 ;
    UInteger mlen2 ;
    Pointer  n ;
    Pointer  k ;
    Returns  Integer

{ Visibility=Private }
External_Function libsodium_crypto_stream_keygen "crypto_stream_keygen" sLibsodiumDllName ;
    Pointer k;      // unsigned char k[crypto_stream_KEYBYTES]
    Returns Void_Type
