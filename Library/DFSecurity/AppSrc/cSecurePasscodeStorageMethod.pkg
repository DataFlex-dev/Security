Use DFSecurity.pkg

{ Visibility=Private }
{ ClassType=Abstract }
Class cSecurePasscodeStorageMethod_Impl_Base is a cSecurityObject

    Procedure Construct_Object
        Forward Send Construct_Object

        Set Delegation_Mode to No_Delegation
    End_Procedure

    Function Init BigInt iOpsLimit Integer iMemLimit Returns Boolean
        Error DFERR_PROGRAM "This method must be overridden!"
        Function_Return False
    End_Function

    Function DeriveKey UChar[] ByRef ucaPasscode UChar[] ucaSalt Integer iOutlen Returns UChar[]
        UChar[] ucaEmpty
        Error DFERR_PROGRAM "This method must be overridden!"
        Function_Return ucaEmpty
    End_Function

    Function StorageString UChar[] ByRef ucaPasscode Returns String
        Error DFERR_PROGRAM "This method must be overridden!"
        Function_Return ''
    End_Function

    Function Verify UChar[] ByRef ucaPasscode String sStorageString Returns Boolean
        Error DFERR_PROGRAM "This method must be overridden!"
        Function_Return False
    End_Function

End_Class

Class cSecurePasscodeStorageMethod is a cSecurityObject

    Procedure Construct_Object
        Forward Send Construct_Object

        // *** properties needed for Initialize()

        { Visibility=Private }
        Property Integer Private_piHashImpl 0
        { Visibility=Private }
        Property Integer Private_piMemLimit C_SEC_DEFAULT
        { Visibility=Private }
        Property BigInt  Private_piOpsLimit C_SEC_DEFAULT

        // ***

        { Visibility=Private }
        Property Handle Private_phoHashImpl 0
    End_Procedure

    { MethodType=Property }
    Procedure Set piPasscodeHashImplementation Integer iHashImplementation
        If (Private_phoHashImpl(Self) <> 0) Begin
            Error DFERR_PROGRAM "Cannot set piPasscodeHashImplementation after Initialize()."
            Procedure_Return
        End

        Set Private_piHashImpl to iHashImplementation
    End_Procedure

    Function piPasscodeHashImplementation Returns Integer
        Function_Return (Private_phoHashImpl(Self))
    End_Function

    { MethodType=Property }
    { InitialValue=C_SEC_DEFAULT }
    Procedure Set piMemLimit Integer iValue
        If (Private_phoHashImpl(Self) <> 0) Begin
            Error DFERR_PROGRAM "Cannot set piMemLimit after Initialize()."
            Procedure_Return
        End

        Set Private_piMemLimit to iValue
    End_Procedure

    Function piMemLimit Returns Integer
        Function_Return (Private_piMemLimit(Self))
    End_Function

    { MethodType=Property }
    { InitialValue=C_SEC_DEFAULT }
    Procedure Set piOpsLimit BigInt iValue
        If (Private_phoHashImpl(Self) <> 0) Begin
            Error DFERR_PROGRAM "Cannot set piOpsLimit after Initialize()."
            Procedure_Return
        End

        Set Private_piOpsLimit to iValue
    End_Procedure

    Function piOpsLimit Returns BigInt
        Function_Return (Private_piOpsLimit(Self))
    End_Function

    { Visibility=Private }
    Function Private_Init Returns Handle
        BigInt  iOpsLimit
        Boolean bSuccess
        Handle  hoHashImpl
        Integer iImplClass
        Integer iMemLimit

        Get Private_piMemLimit to iMemLimit
        Get Private_piOpsLimit to iOpsLimit

        Get Private_piHashImpl to iImplClass
        If (iImplClass = 0) Function_Return 0

        Get Create iImplClass to hoHashImpl
        If (hoHashImpl = 0) Function_Return 0

        Get Init of hoHashImpl iOpsLimit iMemLimit to bSuccess

        If not bSuccess Begin
            Send Destroy of hoHashImpl
            Function_Return 0
        End

        Function_Return hoHashImpl
    End_Function

    { Visibility=Public }
    Procedure Initialize
        Handle hoHashImpl

        If (Private_phoHashImpl(Self) <> 0) Begin
            Error DFERR_PROGRAM "Cannot call Initialize() multiple times."
            Procedure_Return
        End

        Get Private_Init to hoHashImpl

        If (hoHashImpl = 0) Begin
            Error DFERR_PROGRAM "cSecurePasscodeStorageMethod Initialize() failed."
            Procedure_Return
        End

        Set Private_phoHashImpl to hoHashImpl
    End_Procedure

    // @param ucaPasscode [ByRef] The plaintext passcode
    { Visibility=Public }
    Function DeriveKey UChar[] ByRef ucaPasscode UChar[] ucaSalt Integer iOutlen Returns UChar[]
        Handle  hoHashImpl
        UChar[] ucaKey

        Get Private_phoHashImpl to hoHashImpl
        If (hoHashImpl = 0) Begin
            Error DFERR_PROGRAM "Cannot DeriveKey() before Initialize()."
            Function_Return ucaKey
        End

        Get DeriveKey of hoHashImpl (&ucaPasscode) ucaSalt iOutlen to ucaKey

        Send SecureUCharArrayOverwrite (&ucaPasscode)

        Function_Return ucaKey
    End_Function

    { Visibility=Public }
    Function StorageString UChar[] ByRef ucaPasscode Returns String
        Handle hoHashImpl
        String sResult

        Get Private_phoHashImpl to hoHashImpl
        If (hoHashImpl = 0) Begin
            Error DFERR_PROGRAM "Cannot call StorageString() before Initialize()."
            Function_Return ''
        End

        Get StorageString of hoHashImpl (&ucaPasscode) to sResult

        Send SecureUCharArrayOverwrite (&ucaPasscode)

        Function_Return sResult
    End_Function

    { Visibility=Public }
    Function Verify UChar[] ByRef ucaPasscode String sStorageString Returns Boolean
        Boolean bResult
        Handle  hoHashImpl

        Get Private_phoHashImpl to hoHashImpl
        If (hoHashImpl = 0) Begin
            Error DFERR_PROGRAM "Cannot call Verify() before Initialize()."
            Function_Return False
        End

        Get Verify of hoHashImpl (&ucaPasscode) sStorageString to bResult

        Send SecureUCharArrayOverwrite (&ucaPasscode)

        Function_Return bResult
    End_Function

End_Class
