///*
// * WARNING: Unless you absolutely need to use SHA512 for interoperatibility,
// * purposes, you might want to consider crypto_generichash() instead.
// * Unlike SHA512, crypto_generichash() is not vulnerable to length
// * extension attacks.
// */
//
//typedef struct crypto_hash_sha512_state {
//    uint64_t state[8] ;
//    uint64_t count[2] ;
//    uint8_t  buf[128] ;
//} crypto_hash_sha512_state ;

{ Visibility=Private }
External_Function libsodium_crypto_hash_sha512_statebytes "crypto_hash_sha512_statebytes" sLibsodiumDllName ;
    Returns UInteger

Define crypto_hash_sha512_STATEBYTES for (libsodium_crypto_hash_sha512_statebytes())

Define crypto_hash_sha512_BYTES for 64

#IFNDEF sLibsodiumDllName
#IFDEF IS$WIN64
  Define sLibsodiumDllName for libsodium64.dll
#ELSE
  Define sLibsodiumDllName for libsodium.dll
#ENDIF 
#ENDIF

{ Visibility=Private }
External_Function libsodium_crypto_hash_sha512_bytes "crypto_hash_sha512_bytes" sLibsodiumDllName ;
    Returns UInteger

{ Visibility=Private }
External_Function libsodium_crypto_hash_sha512 "crypto_hash_sha512" sLibsodiumDllName ;
    Pointer  out ;
    Pointer  in ;
    BigInt   inlen ;
    Returns  Integer

{ Visibility=Private }
External_Function libsodium_crypto_hash_sha512_init "crypto_hash_sha512_init" sLibsodiumDllName ;
    Pointer state ;
    Returns Integer

{ Visibility=Private }
External_Function libsodium_crypto_hash_sha512_update "crypto_hash_sha512_update" sLibsodiumDllName ;
    Pointer  state ;
    Pointer  in ;
    BigInt   inlen ;
    Returns  Integer

{ Visibility=Private }
External_Function libsodium_crypto_hash_sha512_final "crypto_hash_sha512_final" sLibsodiumDllName ;
    Pointer state ;
    Pointer out ;
    Returns Integer

